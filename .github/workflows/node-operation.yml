name: Node Operation

on:
  workflow_call:
    inputs:
      runs-on:
        default: self-hosted
        required: true
        type: string
      node-name:
        default: node01
        required: true
        type: string
      service:
        default: docker-socket-proxy
        required: false
        type: string
    secrets:
      telegram_token:
        required: true
      telegram_to:
        required: true
      user:
        required: true
      cf_auth_client_id:
        required: true
      cf_auth_client_secret:
        required: true
      gotify_app_token:
        required: true

env:
  NODE_DOCKER_PATH: /home/${{ secrets.user }}/www
  NODE_CRONJOB_PATH: /var/spool/cron/crontabs/${{ secrets.user }}
  SECRETS_CONTEXT: ${{ toJson(secrets) }}
  VARS_CONTEXT: ${{ toJson(vars) }}

jobs:

  deploy:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dump environment context
        run: |
          # https://stackoverflow.com/a/75789640
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          to_envs() { jq -r "to_entries[] | \"\(.key)<<$EOF\n\(.value)\n$EOF\n\""; }
          echo "$VARS_CONTEXT" | to_envs >> $GITHUB_ENV
          echo "$SECRETS_CONTEXT" | to_envs >> $GITHUB_ENV

          for env in $GITHUB_ENV; do
            project_name=$(echo $env | cut -d'=' -f1)
            echo "Creating .env file for $project_name"
            echo "$env" >> ${{ env.NODE_DOCKER_PATH }}/sample/.env
          done

      - name: Setup docker standalone
        run: |
          echo "Copying docker files to ${{ inputs.node-name }} server"
          cp ansible/files/${{ inputs.node-name }}/docker/compose.standalone.yml ${{ env.NODE_DOCKER_PATH }}/compose.yml
          docker compose -f ${{ env.NODE_DOCKER_PATH }}/compose.yml up -d

      - name: Setup docker swarm
        run: |
          echo "Copying docker files to ${{ inputs.node-name }} server"
          cp ansible/files/${{ inputs.node-name }}/swarm/*.yml ${{ env.NODE_DOCKER_PATH }}/*.yml
          for file in ${{ env.NODE_DOCKER_PATH }}/*.yml; do
            file_name=$(cat $file | sed 's/compose\.//; s/\.yml//')
            echo "Deploying $file_name"
            # docker stack deploy -c $file $file_name
          done

  telegram:
    needs: [deploy]
    uses: jd-apprentice/jd-workflows/.github/workflows/telegram.yml@main
    with:
      message: |
        _📚 Action Details_

        📝 Event Name: ${{ github.event_name }}

        _📚 Commit Details_

        📝 Actor: ${{ github.actor }}
        📝 Commit Message: ${{ github.event.head_commit.message }}
        📝 Commit Url: ${{ github.event.head_commit.url }}

        _📚 Repository Details_

        📝 Repository Name: ${{ github.repository }}
        📝 Repository Url: ${{ github.event.repository.url }}

        _📚 Workflow Details_

        📝 Workflow Name: ${{ github.workflow }} on ${{ inputs.node-name }}

      runs-on: ubuntu-latest
      name: Telegram Notification

    secrets:
      envTOKEN: ${{ secrets.telegram_token }}
      envTO: ${{ secrets.telegram_to }}

  gotify:
    needs: [telegram, deploy]
    uses: ./.github/workflows/cloudflare-auth.yml
    secrets:
      cf_auth_client_id: ${{ secrets.CF_AUTH_CLIENT_ID }}
      cf_auth_client_secret: ${{ secrets.CF_AUTH_CLIENT_SECRET }}
      gotify_app_token: ${{ secrets.NODE_OPERATION_GOTIFY_TOKEN }}
    with:
      runs-on: ubuntu-latest
      name: "Cloudflare Auth"
      gotify_server_url: "https://push.jonathan.com.ar"
      gotify_title: "Homemade GitOps - ${{ inputs.node-name }}"
      gotify_description: "${{ github.workflow }} on ${{ inputs.node-name }}"
      gotify_priority: 5